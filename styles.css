@font-face {
  font-family: "SF Compact Display";
  src: url("./fonts/SFCompactDisplay-Medium.woff2") format("woff2");
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "SF Compact Display";
  src: url("./fonts/SFCompactDisplay-Thin.woff2") format("woff2");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl
):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;

  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
:where(p:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}


/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not(
  [fill="none"],
  [fill^="url"]
)) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not(
  [stroke="none"],
  [stroke^="url"]
)) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

:root {
  --color-blue: #1DA1F2;
  --color-black: #0F1419;
  --color-grey: #5B7083;
  --color-white: #FFFFFF;
  --color-light-grey: #EBEEF0;

  --border-radius: 99px;
  --border: 1px solid var(--color-blue);

  --font-family-base: 'SF Compact Display', sans-serif;

  --transition-duration: 0.2s;
}

body {
  font-family: var(--font-family-base), sans-serif;
  font-weight: bold;
  font-size: 15px;
  line-height: 1.2;
  color: var(--color-black);
  background: var(--color-white);
  display: grid;
  grid-template-columns: 275px 600px 350px;
}

a {
  color: inherit;
  text-decoration: none;
}

button {
  cursor: default;
}

.button:hover {
  background: var(--color-grey);
}

.fill_big_button {
  padding-inline: 93px;
  padding-block: 15px;
  margin-left: 10px;
  border: none;
  width: 228px;
  height: 49px;
  border-radius: var(--border-radius);
  background-color: var(--color-blue);
  color: var(--color-white);
}

h1, h2, h3, h4, h5, h6 {
  font-weight: bold;
  font-size: 20px;
  line-height: 1.2;
}

.subName {
  color: var(--color-grey);
}

.left_aside {
  height: 900px;
  width: 275px;
  display: grid;
  grid-template-rows: 53px 480px auto;
  margin-left: 88px;
}

.left_aside-header {
  margin-left: 20px;
  margin-block: 12px;
}

.left_aside-header-logo {
  color: var(--color-blue);
  /*color: var(--color-blue);*/
}

.left_aside-menu-item {
  display: flex;
  align-items: center;
}

.left_aside-menu-item.is-current {
  color: var(--color-blue);
}

.left_aside-menu-icon {
  margin-inline: 20px;
}

.left_aside-menu-item:not(.is-current):hover {
  color: var(--color-grey);
}

.left_aside-menu-button {
  margin-top: 15px;
}

.left_aside-mini_profile {
  display: grid;
  grid-template-columns: 39px auto 33px;
  align-self: end;
  align-items: center;
}

.left_aside_mini_profile-name_subName {
  display: grid;
  grid-template-rows: 19px 19px;
  margin-left: 10px;
  margin-top: 11px;
  margin-bottom: 20px;
}

.left_aside_mini_profile-button {
  position: relative;
  background: transparent;
  border: none;
  width: 33px;
  aspect-ratio: 1;
  margin-bottom: 23px;
}


